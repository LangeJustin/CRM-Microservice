/*
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//  Aufrufe
//  1) Registry Service erstellen und ausfuehren
//        gradlew [bootRun]
//
//  2) QS durch FindBugs und CheckStyle
//        gradlew check
//
//  3) Projektreport erstellen
//        gradlew projectReport
//        gradlew dependencies
//        gradlew dependencies --configuration providedCompile
//        gradlew htmlDependencyReport
//
//  4) Daemon abfragen und stoppen
//        gradlew --status
//        gradlew --stop
//
//  5) Einmalige Initialisierung des Gradle Wrappers in der richtigen Version
//     (dazu ist ggf. eine Internetverbindung erforderlich)
//        gradle wrapper

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'idea'
    id 'findbugs'
    id 'checkstyle'
    id 'pmd'
}

archivesBaseName = "$name"
group = "de.hska.$name"
version = '1.0'

defaultTasks 'bootRun'

ext['lombok.version'] = '1.16.16'
ext['spring-security.version'] = '4.2.2.RELEASE'
ext['tomcat.version'] = '8.5.13'
ext {
    //noinspection GroovyAssignabilityCheck
    javaVersion = 1.8
    springCloudDependenciesVersion = 'Dalston.RC1'
    findbugsVersion = '3.0.1'
    findbugsXml = false
    checkstyleVersion = '7.6.1'
    pmdVersion = '5.5.5'
}

configurations {
    findbugs
    checkstyle
    pmd
}

repositories {
    jcenter()
    maven {
        url 'http://repo.spring.io/milestone'
    }
    maven {
        url 'http://repo.spring.io/release'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudDependenciesVersion"
    }
}


dependencies {
    compile('org.projectlombok:lombok',
            'org.springframework.cloud:spring-cloud-config-server',
            'org.springframework.cloud:spring-cloud-starter-config',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-actuator')

    pmd "net.sourceforge.pmd:pmd-java8:$pmdVersion"
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = "$javaVersion"
//noinspection GroovyUnusedAssignment
targetCompatibility = "$javaVersion"

processResources {
    excludes += ['dev']
}

jar {
    baseName = "$archivesBaseName"
    version = null
}

springBoot {
    //noinspection GroovyAccessibility
    layout = 'ZIP'
}

bootRun {
    //noinspection GroovyAssignabilityCheck
    systemProperties System.properties
    addResources = true
}

assemble.doLast {
    println ''
    println 'Aufruf der ausfuehrbaren JAR-Datei:'
    println "java -jar build/libs/${archivesBaseName}.jar"
    println ''
}

findbugs {
    excludeFilterConfig = resources.text.fromFile("$projectDir/src/main/resources/dev/findbugs.xml")
    effort = "max"
    ignoreFailures = false
}
findbugsMain.reports {
    xml.enabled = findbugsXml
    html.enabled = !findbugsXml
}
findbugsTest.reports {
    xml.enabled = findbugsXml
    html.enabled = !findbugsXml
}

checkstyle {
    toolVersion = "$checkstyleVersion"
    config = resources.text.fromFile("$projectDir/src/main/resources/dev/checkstyle.xml")
    ignoreFailures = false
}
checkstyleMain.reports {
    xml.enabled = true
    html.enabled = true
}
checkstyleTest.reports {
    xml.enabled = false
    html.enabled = true
}

pmd {
    // targetJdk = project.targetCompatibility
    toolVersion = "$pmdVersion"
    ruleSetConfig = resources.text.fromFile("$projectDir/src/main/resources/dev/pmd.xml")
}

task wrapper(type: Wrapper) {
    println 'Wrapper: gradleVersion = 3.5-rc-2'

    gradleVersion = '3.5-rc-2'
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
    // distributionUrl = 'https://services.gradle.org/distributions/gradle-3.5-rc-2-all.zip'
}
